geom_density(alpha = 0.5)
ggplot(rbind(med_brm, med_mtn), aes(cor1_emp_bias, fill = type)) +
geom_density(alpha = 0.5)
ggplot(rbind(med_brm, med_mtn), aes(cor1_emp_bias, fill = type)) +
geom_historam(alpha = 0.5)
ggplot(rbind(med_brm, med_mtn), aes(cor1_emp_bias, fill = type)) +
geom_histogram(alpha = 0.5)
ggplot(rbind(med_brm, med_mtn), aes(cor2_emp_bias, fill = type)) +
geom_histogram(alpha = 0.5)
med_brm = readRDS("med_brm.RDS")
med_mtn = readRDS("med_mtn.RDS")
med_brm$type = "current brms"
med_mtn$type = "matrix normal"
library(ggplot2)
ggplot(rbind(med_brm, med_mtn), aes(cor2_emp_bias, fill = type)) +
geom_density(alpha = 0.5)
ggplot(rbind(med_brm, med_mtn), aes(cor1_emp_bias, fill = type)) +
geom_density(alpha = 0.5)
ggplot(rbind(med_brm, med_mtn), aes(cor2_emp_bias, fill = type)) +
geom_density(alpha = 0.5)
med_brm
ggplot(rbind(med_brm, med_mtn), aes(cor2_emp_bias, fill = type)) +
geom_histogram(aes(y=..count../163), color = "black", position='identity',
binwidth=0.05, alpha = 0.20)+
scale_fill_manual(values = c("red", "blue"), name = "Method")+
geom_vline(xintercept=0.5)+
ggtitle("Posterior median correlation (population r = 0.5)")+
xlab("Phylogenetic correlation (binwidth = 0.05)")+
ylab("Proportion of 200 samples\n")+
theme(panel.background = element_rect(fill='white', colour='black'),
axis.title = element_text(size = 12))
ggplot(rbind(med_brm, med_mtn), aes(cor1_emp_bias, fill = type)) +
geom_histogram(aes(y=..count../163), color = "black", position='identity',
binwidth=0.05, alpha = 0.20)+
scale_fill_manual(values = c("red", "blue"), name = "Method")+
geom_vline(xintercept=0.5)+
ggtitle("Posterior median correlation (population r = 0.5)")+
xlab("Phylogenetic correlation (binwidth = 0.05)")+
ylab("Proportion of 200 samples\n")+
theme(panel.background = element_rect(fill='white', colour='black'),
axis.title = element_text(size = 12))
ggplot(rbind(med_brm, med_mtn), aes(cor2_emp_bias, fill = type)) +
geom_histogram(aes(y=..count../163), color = "black", position='identity',
binwidth=0.05, alpha = 0.20)+
scale_fill_manual(values = c("red", "blue"), name = "Method")+
geom_vline(xintercept=0.5)+
ggtitle("Posterior median correlation (population r = 0.5)")+
xlab("Phylogenetic correlation (binwidth = 0.05)")+
ylab("Proportion of 200 samples\n")+
theme(panel.background = element_rect(fill='white', colour='black'),
axis.title = element_text(size = 12))
install.packages(c("animation", "bayestestR", "blob", "brms", "broom", "bslib", "cachem", "cli", "colourpicker", "corpcor", "cpp11", "credentials", "data.table", "desc", "deSolve", "diffobj", "digest", "DT", "fastmatch", "fda", "future", "gargle", "generics", "gert", "ggdist", "ggplot2", "googledrive", "googlesheets4", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "isoband", "knitr", "ks", "later", "lattice", "lifecycle", "lubridate", "magick", "maps", "matrixStats", "mgcv", "mime", "misc3d", "multicool", "mvtnorm", "nlme", "openssl", "optimx", "packrat", "parallelly", "phangorn", "phytools", "pillar", "pkgload", "plotrix", "R6", "rcmdcheck", "Rcpp", "RcppArmadillo", "RCurl", "readr", "remotes", "reprex", "rlang", "rmarkdown", "rngtools", "roxygen2", "rsconnect", "rvest", "shiny", "stringi", "survival", "testthat", "tibble", "tidybayes", "tidyr", "tinytex", "usethis", "utf8", "waldo", "xfun"))
install.packages(c("backports", "cli", "lattice", "mgcv", "nlme", "survival", "tzdb", "usethis", "uuid"), lib="C:/Program Files/R/R-4.1.1/library")
install.packages(c("backports", "cli", "lattice", "mgcv", "nlme", "survival", "tzdb", "usethis", "uuid"), lib = "C:/Program Files/R/R-4.1.1/library")
install.packages(c("backports", "cli", "lattice", "mgcv", "nlme", "survival", "tzdb", "usethis", "uuid"), lib = "C:/Program Files/R/R-4.1.1/library")
install.packages(c("backports", "bayesplot", "BiocManager", "bitops", "blob", "boot", "bridgesampling", "brio", "brms", "broom", "bslib", "cachem", "callr", "car", "class", "cli", "cluster", "colorspace", "colourpicker", "conquer", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "dbplyr", "deldir", "desc", "devtools", "diffobj", "digest", "downlit", "dplyr", "DT", "e1071", "ellipsis", "fansi", "farver", "fastmatch", "foghorn", "future", "gargle", "generics", "gert", "ggplot2", "gh", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "isoband", "jquerylib", "KernSmooth", "knitr", "later", "lattice", "lifecycle", "lme4", "lubridate", "maps", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "memoise", "meta", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "optimx", "packrat", "parallelly", "parsedate", "pbkrtest", "phytools", "pillar", "pkgload", "plotrix", "posterior", "processx", "ps", "quantreg", "R6", "ragg", "raster", "rcmdcheck", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "readr", "remotes", "reprex", "rex", "rio", "rlang", "rmarkdown", "rngtools", "roxygen2", "rsconnect", "rversions", "rvest", "sass", "sessioninfo", "sf", "shape", "shiny", "sp", "SparseM", "spatial", "spData", "spdep", "statmod", "stringdist", "stringi", "survival", "systemfonts", "testthat", "textshaping", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "viridisLite", "waldo", "withr", "xfun", "xmlparsedata", "zip", "zoo"))
rethinking::logistic(0.3)
rethinking::logistic(0.2)
softmax
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstanr::install_cmdstan()
check_cmdstan_toolchain(fix = TRUE)
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
cmdstanr::install_cmdstan()
setwd("C:/Users/jormar/Dropbox/Primates_IVSO project/Statistical methods and analyses/Github files/primate-SO-analysis")
#expand memory if necessary
memory.limit(100000)
#set directory
setwd(" ")
#load packages
library(brms)
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(mice)
library(ggplot2)
library(cowplot)
library(RColorBrewer)
#set path for cmdstan installation (optional)
cmdstanr::set_cmdstan_path("C:/Temp/cmdstan-2.29.2")
#MCMC settings
n_iter <- 2000
n_warm <- 1000
n_chains <- 4
#load datasets
dataR = read.csv("dataR.csv")
dataG = read.csv("dataG.csv")
dataGR = read.csv("dataGR.csv")
#add redundant column for phylogenetic effects
dataR$phylo = dataR$Genus_species
dataG$phylo = dataG$Genus_species
dataGR$phylo = dataGR$Genus_species
#load phylogenies
#multiple to capture uncertainty
library(ape)
trees = read.nexus("vert phylo.nex")
#create copy of dataframe for manipulation
df1 = dataGR
#random phylo tree
tree = trees[[sample(1:length(trees),1)]]
A = vcv(tree, corr = TRUE)
#sort population rows to match species-level phylogeny
df1 = df1[order(match(df1$Genus_species, rownames(A))),]
#prep response and predictor variables
df1$Solitary[is.na(df1$Solitary)] = 0
df1$MF[is.na(df1$MF)] = 0
df1$MFF[is.na(df1$MFF)] = 0
df1$FMM[is.na(df1$FMM)] = 0
df1$FFMM[is.na(df1$FFMM)] = 0
df1$SO_counts = with(df1, cbind(Solitary, MF, MFF, FMM, FFMM))
df1$SO_tot = with(df1, Solitary + MF + MFF + FMM + FFMM)
df1$obs = seq(1:nrow(df1))
df1$effort = as.vector(scale(log(df1$Nbr_papers_for_each_field_sites)))
f_mean = aggregate(Nbr_papers_for_each_field_sites ~ superfamily, mean, data = df1)
rownames(f_mean) = f_mean$superfamily
df1$effort_bf = as.vector(scale(f_mean[df1$superfamily,"Nbr_papers_for_each_field_sites"] ))
df1$effort_wf = as.vector(scale(df1$Nbr_papers_for_each_field_sites -
f_mean[df1$superfamily,"Nbr_papers_for_each_field_sites"] ))
df1$Activity_pattern = ifelse(df1$Activity_pattern == "Cathemeral_Diurnal_Nocturnal", "Cathemeral",
ifelse(df1$Activity_pattern == "Cathemeral_Diurnal", "Cathemeral",
df1$Activity_pattern))
df1$Activity_pattern = relevel(as.factor(df1$Activity_pattern), ref = "Nocturnal")
df1$Locomotion = as.factor(df1$Locomotion)
df1$Locom = (ifelse(df1$Locomotion == " ", NA, as.character(df1$Locomotion)))
df1$Locom = as.factor(df1$Locom)
df1$logmean_bodysize =
as.vector(scale(log( 1 + apply(cbind(df1$mean_Male_all,df1$mean_Female_all,df1$mean_other_all),
1, mean, na.rm = TRUE) )))
df1$foraging_style = ifelse(df1$foraging_style == "one", "solitary",
ifelse(df1$foraging_style == "unknown", NA,
ifelse(df1$foraging_style == " ", NA,
df1$foraging_style )))
df1$foraging_style = relevel(as.factor(df1$foraging_style), ref = "solitary")
df1$fruitprop = df1$mean_Fruits_all/100
df1$folivprop = df1$mean_Leaves_all/100
df1$flowerprop = df1$mean_Flowers_all/100
df1$seedprop = df1$mean_Seeds_all/100
df1$animalprop = df1$mean_Animal_all/100
df1[df1$Habitat_cat=="","Habitat_cat"] = NA
df1$Habitat_cat = as.factor(df1$Habitat_cat)
#create data lists
datal = rep(list(df1),5)
phylol = rep(list(A = trees[[sample(1:length(trees),1)]]),5)
phylol = lapply(phylol, ape::vcv, cor = TRUE)
phylol = list(list(A = phylol[[1]]), list(A = phylol[[2]]),
list(A = phylol[[3]]), list(A = phylol[[4]]),
list(A = phylol[[5]]))
#model formula
SO_m = bf(SO_counts | trials(SO_tot) ~
mo(Habitat_heterogenity) + Habitat_cat +
foraging_style + Locom + Activity_pattern +
fruitprop + folivprop + seedprop + animalprop +
logmean_bodysize + effort_wf + (1|superfamily) +
(1|gr(phylo, cov = A)) + (1|Genus_species) + (1|obs) )
IVSO_m = bf(IVSOint | trials(Nbr_social_units) ~ 1 +
mo(Habitat_heterogenity) + Habitat_cat +
foraging_style + Locom + Activity_pattern +
fruitprop + folivprop + seedprop + animalprop +
logmean_bodysize + effort_wf + (1|superfamily) +
(1|gr(phylo, cov = A)) + (1|Genus_species) + (1|obs) )
#create copy of dataframe for manipulation
df1 = dataGR
#random phylo tree
tree = trees[[sample(1:length(trees),1)]]
A = vcv(tree, corr = TRUE)
#sort population rows to match species-level phylogeny
df1 = df1[order(match(df1$Genus_species, rownames(A))),]
#prep response and predictor variables
df1$Solitary[is.na(df1$Solitary)] = 0
df1$MF[is.na(df1$MF)] = 0
df1$MFF[is.na(df1$MFF)] = 0
df1$FMM[is.na(df1$FMM)] = 0
df1$FFMM[is.na(df1$FFMM)] = 0
df1$SO_counts = with(df1, cbind(Solitary, MF, MFF, FMM, FFMM))
df1$SO_tot = with(df1, Solitary + MF + MFF + FMM + FFMM)
df1$obs = seq(1:nrow(df1))
df1$effort = as.vector(scale(log(df1$Nbr_papers_for_each_field_sites)))
f_mean = aggregate(Nbr_papers_for_each_field_sites ~ superfamily, mean, data = df1)
rownames(f_mean) = f_mean$superfamily
df1$effort_bf = as.vector(scale(f_mean[df1$superfamily,"Nbr_papers_for_each_field_sites"] ))
df1$effort_wf = as.vector(scale(df1$Nbr_papers_for_each_field_sites -
f_mean[df1$superfamily,"Nbr_papers_for_each_field_sites"] ))
df1$Activity_pattern = ifelse(df1$Activity_pattern == "Cathemeral_Diurnal_Nocturnal", "Cathemeral",
ifelse(df1$Activity_pattern == "Cathemeral_Diurnal", "Cathemeral",
df1$Activity_pattern))
df1$Activity_pattern = relevel(as.factor(df1$Activity_pattern), ref = "Nocturnal")
df1$Locomotion = as.factor(df1$Locomotion)
df1$Locom = (ifelse(df1$Locomotion == " ", NA, as.character(df1$Locomotion)))
df1$Locom = as.factor(df1$Locom)
df1$logmean_bodysize =
as.vector(scale(log( 1 + apply(cbind(df1$mean_Male_all,df1$mean_Female_all,df1$mean_other_all),
1, mean, na.rm = TRUE) )))
df1$foraging_style = ifelse(df1$foraging_style == "one", "solitary",
ifelse(df1$foraging_style == "unknown", NA,
ifelse(df1$foraging_style == " ", NA,
df1$foraging_style )))
df1$foraging_style = relevel(as.factor(df1$foraging_style), ref = "solitary")
df1$fruitprop = df1$mean_Fruits_all/100
df1$folivprop = df1$mean_Leaves_all/100
df1$flowerprop = df1$mean_Flowers_all/100
df1$seedprop = df1$mean_Seeds_all/100
df1$animalprop = df1$mean_Animal_all/100
df1[df1$Habitat_cat=="","Habitat_cat"] = NA
df1$Habitat_cat = as.factor(df1$Habitat_cat)
#create data lists
datal = rep(list(df1),5)
phylol = rep(list(A = trees[[sample(1:length(trees),1)]]),5)
phylol = lapply(phylol, ape::vcv, cor = TRUE)
phylol = list(list(A = phylol[[1]]), list(A = phylol[[2]]),
list(A = phylol[[3]]), list(A = phylol[[4]]),
list(A = phylol[[5]]))
datal = lapply(datal, FUN = function(x) {
complete(mice(x[,c("Genus_species","phylo","superfamily","effort_wf",
"Solitary","MF","MFF","FMM","FFMM",
"Nbr_social_units", "IVSOint",
"Habitat_heterogenity","Habitat_cat",
"foraging_style","logmean_bodysize",
"Locom","Activity_pattern","fruitprop","folivprop",
"flowerprop","seedprop","animalprop")], m = 1)) })
datal = lapply(datal, FUN = function(x) {x$SO_counts = with(x, cbind(Solitary, MF, MFF, FMM, FFMM))
x$SO_tot = with(x, Solitary + MF + MFF + FMM + FFMM)
x$obs = seq(1:nrow(x))
return(x)})
datal.stan = datal
phylol = rep(list(A = trees[[sample(1:length(trees),1)]]),5)
phylol = lapply(phylol, ape::vcv, cor = TRUE)
for(i in 1:(length(phylol))){
x = make_standata(formula = SO_m + IVSO_m + set_rescor(FALSE),
family = c(multinomial, binomial), data = datal.stan[[i]],
data2 = list(A = phylol[[i]]),
prior = c(prior("normal(0,1)", class = "Intercept"),
prior("normal(0,1)", class = "b"),
prior("exponential(2)", class = "sd", resp = "IVSOint"),
eval(parse(text=paste0("c(",
paste0(text="prior(\"exponential(2)\",
class = \"sd\", resp=\"SOcounts\", dpar=\"mu",
levels(as.factor(df1$Main1))[-5], "\")",collapse = ","), ")")))))
#add extra variables for solitary variable
x$N_21 = x$N_1
x$N_22 = x$N_2
x$N_23 = x$N_3
x$N_24 = x$N_4
x$M_21 = x$M_1
x$M_22 = x$M_2
x$M_23 = x$M_3
x$M_24 = x$M_4
x$J_21_SOcounts = x$J_1_SOcounts
x$J_22_SOcounts = x$J_2_SOcounts
x$J_23_SOcounts = x$J_3_SOcounts
x$J_24_SOcounts = x$J_4_SOcounts
x$Z_21_muSolitary_SOcounts_1 = x$Z_1_muMF_SOcounts_1
x$Z_22_muSolitary_SOcounts_1 = x$Z_2_muMF_SOcounts_1
x$Z_23_muSolitary_SOcounts_1 = x$Z_3_muMF_SOcounts_1
x$Z_24_muSolitary_SOcounts_1 = x$Z_4_muMF_SOcounts_1
x$K_muSolitary_SOcounts = x$K_muMF_SOcounts
x$X_muSolitary_SOcounts = x$X_muMF_SOcounts
x$Ksp_muSolitary_SOcounts = x$Ksp_muMF_SOcounts
x$Imo_muSolitary_SOcounts = x$Imo_muMF_SOcounts
x$Jmo_muSolitary_SOcounts = x$Jmo_muMF_SOcounts
x$Xmo_muSolitary_SOcounts_1 = x$Xmo_muMF_SOcounts_1
x$con_simo_muSolitary_SOcounts_1 = x$con_simo_muMF_SOcounts_1
x$Lcov_23 = x$Lcov_3
datal.stan[[i]] = x
}
#load modified code
mod_r = rstan::stan_model("brms_reparam1.stan")
#estimate over 5 random trees
full.mod1 <- rstan::sampling(mod_r, data=datal.stan[[1]], init=0, iter = n_iter, warmup = n_warm,
chains = n_chains, cores = n_chains, control = list(adapt_delta=0.95, max_treedepth=10))
saveRDS(full.mod1, "full_mod1.RDS")
full.mod2 <- rstan::sampling(mod_r, data=datal.stan[[1]], init=0, iter = n_iter, warmup = n_warm,
chains = n_chains, cores = n_chains, control = list(adapt_delta=0.95, max_treedepth=10))
saveRDS(full.mod2, "full_mod2.RDS")
full.mod3 <- rstan::sampling(mod_r, data=datal.stan[[1]], init=0, iter = n_iter, warmup = n_warm,
chains = n_chains, cores = n_chains, control = list(adapt_delta=0.95, max_treedepth=10))
saveRDS(full.mod3, "full_mod3.RDS")
full.mod4 <- rstan::sampling(mod_r, data=datal.stan[[1]], init=0, iter = n_iter, warmup = n_warm,
chains = n_chains, cores = n_chains, control = list(adapt_delta=0.95, max_treedepth=10))
saveRDS(full.mod4, "full_mod4.RDS")
full.mod5 <- rstan::sampling(mod_r, data=datal.stan[[1]], init=0, iter = n_iter, warmup = n_warm,
chains = n_chains, cores = n_chains, control = list(adapt_delta=0.95, max_treedepth=10))
saveRDS(full.mod5, "full_mod5.RDS")
#combine posteriors
post1 = rstan::extract(full.mod1)
post2 = rstan::extract(full.mod2)
post3 = rstan::extract(full.mod3)
post4 = rstan::extract(full.mod4)
post5 = rstan::extract(full.mod5)
rbind(post1,post2,post3,post4,post5)
post1
str(post1)
?rstan::extract
as.array(full.mod1)
str(as.array(full.mod1))
str(as.matrix(full.mod1))
str(as.data.frame(full.mod1))
post1 = as.data.frame(full.mod1)
post2 = as.data.frame(full.mod2)
post3 = as.data.frame(full.mod3)
post4 = as.data.frame(full.mod4)
post5 = as.data.frame(full.mod5)
post = rbind(post1,post2,post3,post4,post5)
#variance explained by fixed effects
fe_v =  data.frame(Solitary = apply(post$muSolitary_SOcounts, 1, var) - apply(post$muSolitary_SOcounts2, 1, var),
MF = apply(post$muMF_SOcounts, 1, var) - apply(post$muMF_SOcounts2, 1, var),
MFF = apply(post$muMFF_SOcounts, 1, var) - apply(post$muMFF_SOcounts2, 1, var),
FMM = apply(post$muFMM_SOcounts, 1, var) - apply(post$muFMM_SOcounts2, 1, var),
FFMM = apply(post$muFFMM_SOcounts, 1, var) - apply(post$muFFMM_SOcounts2, 1, var),
IVSO = apply(post$mu_IVSOint, 1, var) - apply(post$mu_IVSOint2, 1, var))
post1
str(post)
post = rbind(post1,post2,post3,post4,post5)
rbind(post1,post2,post3,post4,post5)
str(rbind(post1,post2,post3,post4,post5))
post$muSapply(post$muSolitary_SOcounts, 1, var)
apply(post$muSolitary_SOcounts, 1, var)
#combine posteriors
post1 = as.array(full.mod1)
str(post1)
post1
full.mod1
#combine posteriors
post1 = rstan::extract(full.mod1
post2 = rstan::extract(full.mod2)
post3 = rstan::extract(full.mod3)
post4 = rstan::extract(full.mod4)
post5 = rstan::extract(full.mod5)
post = rbind(post1,post2,post3,post4,post5)
#variance explained by fixed effects
fe_v =  data.frame(Solitary = apply(post$muSolitary_SOcounts, 1, var) - apply(post$muSolitary_SOcounts2, 1, var),
MF = apply(post$muMF_SOcounts, 1, var) - apply(post$muMF_SOcounts2, 1, var),
MFF = apply(post$muMFF_SOcounts, 1, var) - apply(post$muMFF_SOcounts2, 1, var),
FMM = apply(post$muFMM_SOcounts, 1, var) - apply(post$muFMM_SOcounts2, 1, var),
FFMM = apply(post$muFFMM_SOcounts, 1, var) - apply(post$muFFMM_SOcounts2, 1, var),
IVSO = apply(post$mu_IVSOint, 1, var) - apply(post$mu_IVSOint2, 1, var))
#change negative values
fe_v[fe_v<0] = 0
species_v =  data.frame(Solitary = post$sd_21^2,
MF = post$sd_1^2,
MFF = post$sd_5^2,
FMM = post$sd_9^2,
FFMM = post$sd_13^2,
IVSO = post$sd_17^2)
phylo_v =  data.frame(Solitary = post$sd_23^2,
MF = post$sd_3^2,
MFF = post$sd_7^2,
FMM = post$sd_11^2,
FFMM = post$sd_15^2,
IVSO = post$sd_19^2)
superfamily_v =  data.frame(Solitary = post$sd_24^2,
MF = post$sd_4^2,
MFF = post$sd_8^2,
FMM = post$sd_12^2,
FFMM = post$sd_16^2,
IVSO = post$sd_20^2)
pop_v =  data.frame(Solitary = post$sd_22^2,
MF = post$sd_2^2,
MFF = post$sd_6^2,
FMM = post$sd_10^2,
FFMM = post$sd_14^2,
IVSO = post$sd_18^2)
#latent scale variance
logit_v = (pi/sqrt(3))^2
#calculate
phylo_r2 = phylo_v / (fe_v + phylo_v + species_v + superfamily_v + logit_v)
#summarize
apply(phylo_r2, 2, mean); apply(phylo_r2, 2, sd)
fe_r2 = fe_v / (fe_v + phylo_v + species_v + superfamily_v + logit_v)
apply(fe_r2, 2, mean); apply(fe_r2, 2, sd)
species_r2 = species_v / (fe_v + phylo_v + species_v + superfamily_v + logit_v)
apply(species_r2, 2, mean); apply(species_r2, 2, sd)
superf_r2 = superfamily_v / (fe_v + phylo_v + species_v + superfamily_v + logit_v)
apply(superf_r2, 2, mean); apply(superf_r2, 2, sd)
pop_r2 = logit_v / (fe_v + phylo_v + species_v + superfamily_v + logit_v)
apply(pop_r2, 2, mean); apply(pop_r2, 2, sd)
###########################################################################
#plot
#wide to long
library(tidyr)
ldf_phylo = tidyr::gather(phylo_r2)
ldf_fe = tidyr::gather(fe_r2)
ldf_species = tidyr::gather(species_r2)
ldf_superf = tidyr::gather(superf_r2)
ldf_pop = tidyr::gather(pop_r2)
ldf_phylo$type = rep("Phylogeny",nrow(ldf_phylo))
ldf_fe$type = rep("Ecological predictors",nrow(ldf_fe))
ldf_species$type = rep("Species residual",nrow(ldf_species))
ldf_superf$type = rep("Superfamily residual",nrow(ldf_superf))
ldf_pop$type = rep("Population residual",nrow(ldf_pop))
ldf = rbind(ldf_phylo, ldf_fe, ldf_species, ldf_superf, ldf_pop)
ldf$key[ldf$key=="IVSO"] = "Overall IVSO"
ldf$key = factor(ldf$key, levels = c("Solitary", "MF","MFF" , "FMM", "FFMM", "Overall IVSO"))
ldf$type = factor(ldf$type, levels = c("Phylogeny", "Ecological predictors",  "Population residual",
"Species residual", "Superfamily residual"))
library(ggplot2)
library(tidybayes)
cc <- scales::seq_gradient_pal("lightblue", "darkblue")(seq(0,1,length.out=5))
R2.plot =
ggplot(ldf, aes(x = value, y = type, color = type, fill = type))+
coord_cartesian(xlim=c(0,1))+
stat_pointinterval(.width = c(0.90), size = 10, position = position_dodge(width = 0.5)) +
facet_wrap(. ~ key, nrow=1)+
scale_color_manual(values = cc)+
scale_fill_manual(values = cc)+
scale_y_discrete(limits=rev(levels(ldf$type)))+
scale_x_continuous(expand=c(0,0),breaks=c(0,0.5,1), labels =c("0","0.5","1"))+
xlab(" \nProportion of variance explained")+
theme(plot.title =element_text(size=12, hjust=0.5),
axis.ticks.y=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x=element_text(size=10, face = "bold"),
axis.title.y=element_blank(),
axis.text.x=element_text(size=10),
legend.title = element_blank(),
legend.key = element_rect(fill = NA),
axis.line = element_line(size = 1),
strip.background = element_blank(),
strip.text.x = element_text(face = "bold", size = 12),
panel.spacing = unit(1.3, "lines"),
panel.border=element_rect(fill=NA,color="black", size=1,
linetype="solid"),
panel.background= element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="top",
plot.margin = unit(c(0.1,0.4,0.7,0.05), "cm"))
#save
save_plot("variance_explained.png", R2.plot, base_height = 3.5, base_width = 12)
saveRDS(R2.plot, "r2_plot.RDS")
R2.plot = readRDS("r2_plot.RDS")
############################################################
#Specific ecological effects (univariate)
############################################################
#each section fits a model for a single predictor
#and then creates a plot for the total effect
#create copy of dataframe for manipulation
df1 = dataGR
#random phylo tree
tree = trees[[sample(1:length(trees),1)]]
A = vcv(tree, corr = TRUE)
#sort population rows to match species-level phylogeny
df1 = df1[order(match(df1$Genus_species, rownames(A))),]
#prep response and predictor variables
df1$Solitary[is.na(df1$Solitary)] = 0
df1$MF[is.na(df1$MF)] = 0
df1$MFF[is.na(df1$MFF)] = 0
df1$FMM[is.na(df1$FMM)] = 0
df1$FFMM[is.na(df1$FFMM)] = 0
df1$SO_counts = with(df1, cbind(Solitary, MF, MFF, FMM, FFMM))
df1$SO_tot = with(df1, Solitary + MF + MFF + FMM + FFMM)
df1$obs = seq(1:nrow(df1))
df1$effort = as.vector(scale(log(df1$Nbr_papers_for_each_field_sites)))
f_mean = aggregate(Nbr_papers_for_each_field_sites ~ superfamily, mean, data = df1)
rownames(f_mean) = f_mean$superfamily
df1$effort_bf = as.vector(scale(f_mean[df1$superfamily,"Nbr_papers_for_each_field_sites"] ))
df1$effort_wf = as.vector(scale(df1$Nbr_papers_for_each_field_sites -
f_mean[df1$superfamily,"Nbr_papers_for_each_field_sites"] ))
df1$Activity_pattern = ifelse(df1$Activity_pattern == "Cathemeral_Diurnal_Nocturnal", "Cathemeral",
ifelse(df1$Activity_pattern == "Cathemeral_Diurnal", "Cathemeral",
df1$Activity_pattern))
df1$Activity_pattern = relevel(as.factor(df1$Activity_pattern), ref = "Nocturnal")
df1$Locomotion = as.factor(df1$Locomotion)
df1$Locom = (ifelse(df1$Locomotion == " ", NA, as.character(df1$Locomotion)))
df1$Locom = as.factor(df1$Locom)
df1$logmean_bodysize =
as.vector(scale(log( 1 + apply(cbind(df1$mean_Male_all,df1$mean_Female_all,df1$mean_other_all),
1, mean, na.rm = TRUE) )))
df1$foraging_style = ifelse(df1$foraging_style == "one", "solitary",
ifelse(df1$foraging_style == "unknown", NA,
ifelse(df1$foraging_style == " ", NA,
df1$foraging_style )))
df1$foraging_style = relevel(as.factor(df1$foraging_style), ref = "solitary")
df1$fruitprop = df1$mean_Fruits_all/100
df1$folivprop = df1$mean_Leaves_all/100
df1$flowerprop = df1$mean_Flowers_all/100
df1$seedprop = df1$mean_Seeds_all/100
df1$animalprop = df1$mean_Animal_all/100
df1[df1$Habitat_cat=="","Habitat_cat"] = NA
df1$Habitat_cat = as.factor(df1$Habitat_cat)
#create data lists
datal = rep(list(df1),5)
phylol = rep(list(A = trees[[sample(1:length(trees),1)]]),5)
phylol = lapply(phylol, ape::vcv, cor = TRUE)
phylol = list(list(A = phylol[[1]]), list(A = phylol[[2]]),
list(A = phylol[[3]]), list(A = phylol[[4]]),
list(A = phylol[[5]]))
############################################################
#activity
#model formula
SO_m = bf(SO_counts | trials(SO_tot) ~
1 + Activity_pattern + effort_wf +
(1|superfamily) + (1|gr(phylo, cov = A)) + (1|Genus_species) + (1|obs) )
IVSO_m = bf(IVSOint | trials(SO_tot) ~
1 + Activity_pattern + effort_wf +
(1|superfamily) + (1|gr(phylo, cov = A)) + (1|Genus_species) + (1|obs))
m.act = brm_multiple(formula = SO_m + IVSO_m + set_rescor(FALSE),
family = c(multinomial, binomial), data = datal, data2 = phylol,
prior = c(prior("normal(0,1)", class = "Intercept"),
prior("normal(0,1)", class = "b"),
prior("exponential(2)", class = "sd", resp = "IVSOint"),
eval(parse(text=paste0("c(",
paste0(text="prior(\"exponential(2)\",
class = \"sd\", resp=\"SOcounts\", dpar=\"mu",
levels(as.factor(df1$Main1))[-5], "\")",collapse = ","), ")")))),
backend="cmdstanr", stan_model_args=list(stanc_options = list("O1")),
warmup = n_warm, iter=n_iter, chains = n_chains, inits = 0,
control=list(adapt_delta=0.95, max_treedepth=10))
#combine posteriors
post1 = rstan::extract(full.mod1)
str(post1)
str(as.matrix(full.mod1))
str(as.array(full.mod1))
do.call(Map, c(f = rbind, list(post1,post2,post3,post4,post5)))
